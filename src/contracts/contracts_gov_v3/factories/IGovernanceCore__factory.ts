/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  IGovernanceCore,
  IGovernanceCoreInterface,
} from "../IGovernanceCore";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "oldApprovedPayloadsRegistry",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "newApprovedPayloadsRegistry",
        type: "address",
      },
    ],
    name: "ApprovedPayloadsRegistryUpdated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "proposalId",
        type: "uint256",
      },
    ],
    name: "ProposalCanceled",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "proposalId",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "address",
        name: "creator",
        type: "address",
      },
      {
        indexed: true,
        internalType: "enum CrosschainUtils.AccessControl",
        name: "accessLevel",
        type: "uint8",
      },
      {
        indexed: false,
        internalType: "uint24",
        name: "votingDuration",
        type: "uint24",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "snapshotBlockHash",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "ipfsHash",
        type: "bytes32",
      },
    ],
    name: "ProposalCreated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "proposalId",
        type: "uint256",
      },
    ],
    name: "ProposalExecuted",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "proposalId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "votesFor",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "votesAgainst",
        type: "uint256",
      },
    ],
    name: "ProposalFailed",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "proposalId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "votesFor",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "votesAgainst",
        type: "uint256",
      },
    ],
    name: "ProposalQueued",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "enum CrosschainUtils.AccessControl",
        name: "accessLevel",
        type: "uint8",
      },
      {
        indexed: true,
        internalType: "bool",
        name: "isActive",
        type: "bool",
      },
      {
        indexed: false,
        internalType: "uint24",
        name: "votingDuration",
        type: "uint24",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "quorum",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "differential",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "minPropositionPower",
        type: "uint256",
      },
    ],
    name: "VotingConfigUpdated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "oldVotingStrategy",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "newVotingStrategy",
        type: "address",
      },
    ],
    name: "VotingStrategyUpdated",
    type: "event",
  },
  {
    inputs: [],
    name: "COOLDOWN_PERIOD",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "NAME",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "PRECISION_DIVIDER",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "PROPOSAL_EXPIRATION_TIME",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "proposalId",
        type: "uint256",
      },
    ],
    name: "cancel",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "enum CrosschainUtils.Chains",
            name: "chain",
            type: "uint8",
          },
          {
            internalType: "enum CrosschainUtils.AccessControl",
            name: "accessLevel",
            type: "uint8",
          },
          {
            internalType: "address",
            name: "mandateProvider",
            type: "address",
          },
          {
            internalType: "uint40",
            name: "payloadId",
            type: "uint40",
          },
          {
            internalType: "uint40",
            name: "__RESERVED",
            type: "uint40",
          },
        ],
        internalType: "struct CrosschainUtils.Payload[]",
        name: "payloads",
        type: "tuple[]",
      },
      {
        internalType: "enum CrosschainUtils.AccessControl",
        name: "accessLevel",
        type: "uint8",
      },
      {
        internalType: "address",
        name: "votingPortal",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "ipfsHash",
        type: "bytes32",
      },
    ],
    name: "create",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "proposalId",
        type: "uint256",
      },
    ],
    name: "execute",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "proposalId",
        type: "uint256",
      },
    ],
    name: "getProposal",
    outputs: [
      {
        components: [
          {
            internalType: "enum CrosschainUtils.Chains",
            name: "votingChain",
            type: "uint8",
          },
          {
            internalType: "uint24",
            name: "votingDuration",
            type: "uint24",
          },
          {
            internalType: "uint40",
            name: "creationTime",
            type: "uint40",
          },
          {
            internalType: "uint184",
            name: "____RESERVED",
            type: "uint184",
          },
          {
            internalType: "bytes32",
            name: "snapshotBlockHash",
            type: "bytes32",
          },
          {
            internalType: "enum CrosschainUtils.AccessControl",
            name: "accessLevel",
            type: "uint8",
          },
          {
            internalType: "enum IGovernanceCore.State",
            name: "state",
            type: "uint8",
          },
          {
            internalType: "address",
            name: "creator",
            type: "address",
          },
          {
            components: [
              {
                internalType: "enum CrosschainUtils.Chains",
                name: "chain",
                type: "uint8",
              },
              {
                internalType: "enum CrosschainUtils.AccessControl",
                name: "accessLevel",
                type: "uint8",
              },
              {
                internalType: "address",
                name: "mandateProvider",
                type: "address",
              },
              {
                internalType: "uint40",
                name: "payloadId",
                type: "uint40",
              },
              {
                internalType: "uint40",
                name: "__RESERVED",
                type: "uint40",
              },
            ],
            internalType: "struct CrosschainUtils.Payload[]",
            name: "payloads",
            type: "tuple[]",
          },
          {
            internalType: "uint40",
            name: "queuingTime",
            type: "uint40",
          },
          {
            internalType: "address",
            name: "votingPortal",
            type: "address",
          },
          {
            internalType: "bytes32",
            name: "ipfsHash",
            type: "bytes32",
          },
          {
            internalType: "uint256",
            name: "forVotes",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "againstVotes",
            type: "uint256",
          },
        ],
        internalType: "struct IGovernanceCore.Proposal",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "enum CrosschainUtils.AccessControl",
        name: "accessLevel",
        type: "uint8",
      },
    ],
    name: "getVotingConfig",
    outputs: [
      {
        components: [
          {
            internalType: "bool",
            name: "isActive",
            type: "bool",
          },
          {
            internalType: "uint24",
            name: "votingDuration",
            type: "uint24",
          },
          {
            internalType: "uint56",
            name: "quorum",
            type: "uint56",
          },
          {
            internalType: "uint56",
            name: "differential",
            type: "uint56",
          },
          {
            internalType: "uint56",
            name: "minPropositionPower",
            type: "uint56",
          },
        ],
        internalType: "struct IGovernanceCore.VotingConfig",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "proposalsCount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "enum CrosschainUtils.AccessControl",
            name: "accessLevel",
            type: "uint8",
          },
          {
            internalType: "bool",
            name: "isActive",
            type: "bool",
          },
          {
            internalType: "uint24",
            name: "votingDuration",
            type: "uint24",
          },
          {
            internalType: "uint256",
            name: "quorum",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "differential",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "minPropositionPower",
            type: "uint256",
          },
        ],
        internalType: "struct IGovernanceCore.SetVotingConfigInput[]",
        name: "votingConfigs",
        type: "tuple[]",
      },
    ],
    name: "setVotingConfigs",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IL1VotingStrategy",
        name: "newVotingStrategy",
        type: "address",
      },
    ],
    name: "setVotingStrategy",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "proposalId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "forVotes",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "againstVotes",
        type: "uint256",
      },
    ],
    name: "submitResults",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "votingStrategy",
    outputs: [
      {
        internalType: "contract IL1VotingStrategy",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

export class IGovernanceCore__factory {
  static readonly abi = _abi;
  static createInterface(): IGovernanceCoreInterface {
    return new utils.Interface(_abi) as IGovernanceCoreInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IGovernanceCore {
    return new Contract(address, _abi, signerOrProvider) as IGovernanceCore;
  }
}
