/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  IVotingMachineWithProofs,
  IVotingMachineWithProofsInterface,
} from "./IVotingMachineWithProofs";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "oldL2SideBridge",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "newL2SideBridge",
        type: "address",
      },
    ],
    name: "L2SideBridgeUpdated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "proposalId",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "bytes32",
        name: "l1BlockHash",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "startTime",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "endTime",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address",
        name: "strategy",
        type: "address",
      },
    ],
    name: "ProposalCreated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "proposalId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "forVotes",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "againstVotes",
        type: "uint256",
      },
    ],
    name: "ProposalResultsSent",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "proposalId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "endedBlock",
        type: "uint256",
      },
    ],
    name: "ProposalVoteClosed",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "oldRootsWarehouse",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "newRootsWarehouse",
        type: "address",
      },
    ],
    name: "RootsWarehouseUpdated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "proposalId",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "address",
        name: "voter",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "support",
        type: "bool",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "votingPower",
        type: "uint256",
      },
    ],
    name: "VoteEmitted",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "oldVotingStrategy",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "newVotingStrategy",
        type: "address",
      },
    ],
    name: "VotingStrategyUpdated",
    type: "event",
  },
  {
    inputs: [],
    name: "BLOCKS_TO_FINALITY",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "CHAIN_ID",
    outputs: [
      {
        internalType: "enum CrossChainUtils.Chains",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "proposalId",
        type: "uint256",
      },
    ],
    name: "closeVote",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "proposalId",
        type: "uint256",
      },
    ],
    name: "create",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "proposalId",
        type: "uint256",
      },
    ],
    name: "getProposalById",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "id",
            type: "uint256",
          },
          {
            internalType: "bytes32",
            name: "l1BlockHash",
            type: "bytes32",
          },
          {
            internalType: "uint256",
            name: "startTime",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "endTime",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "forVotes",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "againstVotes",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "votingEndedBlock",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "sentToL1",
            type: "bool",
          },
          {
            internalType: "contract IBaseVotingStrategy",
            name: "strategy",
            type: "address",
          },
        ],
        internalType: "struct IVotingMachineWithProofs.ProposalWithoutVotes",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "proposalId",
        type: "uint256",
      },
    ],
    name: "getProposalState",
    outputs: [
      {
        internalType: "enum IVotingMachineWithProofs.ProposalState",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "proposalId",
        type: "uint256",
      },
    ],
    name: "getVote",
    outputs: [
      {
        components: [
          {
            internalType: "bool",
            name: "support",
            type: "bool",
          },
          {
            internalType: "uint248",
            name: "votingPower",
            type: "uint248",
          },
        ],
        internalType: "struct IVotingMachineWithProofs.Vote",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "l2SideBridge",
    outputs: [
      {
        internalType: "contract IL2SideVotingPortal",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "rootsWarehouse",
    outputs: [
      {
        internalType: "contract IRootsWarehouse",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "proposalId",
        type: "uint256",
      },
    ],
    name: "sendVoteResult",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IL2SideVotingPortal",
        name: "newL2SideBridge",
        type: "address",
      },
    ],
    name: "setL2SideBridge",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IRootsWarehouse",
        name: "newRootsWarehouse",
        type: "address",
      },
    ],
    name: "setRootsWarehouse",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IBaseVotingStrategy",
        name: "newVotingStrategy",
        type: "address",
      },
    ],
    name: "setVotingStrategy",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "holder",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "balanceMappingPosition",
        type: "uint256",
      },
    ],
    name: "slotOfAddressUint256Mapping",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "proposalId",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "support",
        type: "bool",
      },
      {
        components: [
          {
            internalType: "address",
            name: "underlyingAsset",
            type: "address",
          },
          {
            internalType: "uint128",
            name: "slot",
            type: "uint128",
          },
          {
            internalType: "bytes",
            name: "proof",
            type: "bytes",
          },
        ],
        internalType: "struct IVotingMachineWithProofs.VotingBalanceProof[]",
        name: "votingBalanceProofs",
        type: "tuple[]",
      },
    ],
    name: "submitVote",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "votingStrategy",
    outputs: [
      {
        internalType: "contract IBaseVotingStrategy",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

export class IVotingMachineWithProofs__factory {
  static readonly abi = _abi;
  static createInterface(): IVotingMachineWithProofsInterface {
    return new utils.Interface(_abi) as IVotingMachineWithProofsInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IVotingMachineWithProofs {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as IVotingMachineWithProofs;
  }
}
